package ${package}.${moduleName}.controller;
import ${package}.base.BasePageList;
import ${package}.base.ApiResultEntity;
import ${package}.${moduleName}.beans.${className};
import ${package}.${moduleName}.beans.${className}Example;
import ${package}.${moduleName}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
/**
 *
 * @ProjectName: ${moduleName}
 * @Package: ${package}.${moduleName}.controller
 * @ClassName: ${className}Controller
 * @Description:
 * @Author: ${author}
 * @CreateDate: ${datetime}
 * @UpdateUser: 更新者
 * @UpdateDate: ${datetime}
 * @UpdateRemark: 更新说明
 * @Version: 1.0
 */
@RestController
@RequestMapping(value = "/${pathName}", produces = MediaType.APPLICATION_JSON_VALUE)
public class ${className}Controller {
	@Autowired
	private ${className}Service ${classname}Service;



    @PostMapping(value = "/add")
    public ApiResultEntity add(@RequestBody ${className} req)
    {
        if (null == req) {
            return ApiResultEntity.returnResult(StateCode.ILLEGALREQUESTPARAMETER.get());
        }
         return	${classname}Service.add(req);
    }


    @RequestMapping(value = "/modify", method = RequestMethod.PUT)
    public  ApiResultEntity modify(@RequestBody ${className} req)
    {
        if (null == req||req.getLongid()==null) {
            return ApiResultEntity.returnResult(StateCode.ILLEGALREQUESTPARAMETER.get());
        }
        ${className} entity=${classname}Service.getById(req.getId());
        if(null==entity)
        {
            return  ApiResultEntity.returnResult(StateCode.NODATAEXIST.get());
        }
        return	${classname}Service.modify(req);
    }



    @RequestMapping(value = "/del", method = RequestMethod.DELETE)
    public ApiResultEntity del(@RequestParam("${pk.attrname}") ${pk.attrType} ${pk.attrname})
    {
        if(${pk.attrname}==null||${pk.attrname}<=0)
        {
            return  ApiResultEntity.returnResult(StateCode.ILLEGALREQUESTPARAMETER.get());
        }
        return	${classname}Service.del(${pk.attrname});
    }


    @GetMapping(value = "/getById")
    public  ApiResultEntity info(@RequestParam("${pk.attrname}") ${pk.attrType} ${pk.attrname})
    {
        if(${pk.attrname}==null||${pk.attrname}<=0)
        {
            return  ApiResultEntity.returnResult(StateCode.ILLEGALREQUESTPARAMETER.get());
        }
        ${className} result = ${classname}Service.getById(${pk.attrname});

        if (null != result) {
            return ApiResultEntity.returnResult(StateCode.success.get(), result);
        }
        return ApiResultEntity.returnResult(StateCode.NODATAEXIST.get());
    }

    @GetMapping(value = "/getByPage")
    public ApiResultEntity<BasePageList<${className}>> getByPage(@RequestParam(required = false,defaultValue = "1") Integer page,
                                     @RequestParam(required = false,defaultValue = "15") Integer size)
    {
            ${className}Example example = new ${className}Example();
            ${className}Example.Criteria criteria = example.createCriteria();
            example.setOrderByClause("id desc");
            return ${classname}Service.queryPageListByExample(example,page,size);
    }
}
